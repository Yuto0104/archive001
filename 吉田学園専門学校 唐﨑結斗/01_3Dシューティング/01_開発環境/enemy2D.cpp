//=============================================================================
//
// 2Dエネミー(enemy2D.cpp)
// Author : 唐﨑結斗
// 概要 : 2Dエネミー生成を行う
//
//=============================================================================

//*****************************************************************************
// インクルード
//*****************************************************************************
#include <assert.h>

#include "enemy2D.h"
#include "renderer.h"
#include "application.h"

#include "bullet2D.h"

//=============================================================================
// インスタンス生成
// Author : 唐﨑結斗
// 概要 : 2Dバレットを生成する
//=============================================================================
CEnemy2D * CEnemy2D::Create(const D3DXVECTOR3 &pos, const D3DXVECTOR3 &rot, const float fSpeed)
{
	// オブジェクトインスタンス
	CEnemy2D *pEnemy2D = nullptr;

	pEnemy2D = new CEnemy2D;

	if (pEnemy2D != nullptr)
	{// 数値の初期化
		pEnemy2D->Init();
		pEnemy2D->SetPos(pos);
		pEnemy2D->SetRot(rot);
		pEnemy2D->m_fSpeed = fSpeed;
	}
	else
	{// メモリの確保ができなかった
		assert(false);
	}

	// インスタンスを返す
	return pEnemy2D;
}

//=============================================================================
// コンストラクタ
// Author : 唐﨑結斗
// 概要 : インスタンス生成時に行う処理
//=============================================================================
CEnemy2D::CEnemy2D()
{
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_fSpeed = 0.0f;
	m_nCntShot = 0;
	SetObjType(CObject::OBJTYPE_2DENEMY);				// オブジェクトの種別設定
}

//=============================================================================
// デストラクタ
// Author : 唐﨑結斗
// 概要 : インスタンス終了時に行う処理
//=============================================================================
CEnemy2D::~CEnemy2D()
{

}

//=============================================================================
// 初期化
// Author : 唐﨑結斗
// 概要 : 
//=============================================================================
HRESULT CEnemy2D::Init()
{
	// オブジェクト2Dの初期化
	CObject2D::Init();

	// テクスチャの設定
	LoadTex(4);

	// サイズ
	D3DXVECTOR3 size = GetSize();
	size = D3DXVECTOR3(100.0f, 100.0f, 0.0f);
	SetSize(size);

	// テクスチャ座標の設定
	SetTex(D3DXVECTOR2(0.0f, 0.0f), D3DXVECTOR2(1.0f, 1.0f));

	return S_OK;
}

//=============================================================================
// 終了
// Author : 唐﨑結斗
// 概要 : テクスチャのポインタと頂点バッファの解放
//=============================================================================
void CEnemy2D::Uninit()
{
	// オブジェクト2Dの終了
	CObject2D::Uninit();
}

//=============================================================================
// 更新
// Author : 唐﨑結斗
// 概要 : 2Dポリゴンの更新を行う
//=============================================================================
void CEnemy2D::Update()
{
	// オブジェクト2Dの更新
	CObject2D::Update();

	// 移動
	D3DXVECTOR3 pos = GetPos();
	SetPosOld(pos);
	pos -= Move();
	SetPos(pos);

	m_nCntShot++;

	if (m_nCntShot % 180 == 0)
	{
		CBullet2D::Create(pos, D3DXVECTOR3(0.0f,0.0f,D3DX_PI * 0.5f), 5.0f);
	}

	// テクスチャ座標の設定
	SetTex(D3DXVECTOR2(0.0f, 0.0f), D3DXVECTOR2(1.0f, 1.0f));
}

//=============================================================================
// 描画
// Author : 唐﨑結斗
// 概要 : 2Dポリゴンの描画を行う
//=============================================================================
void CEnemy2D::Draw()
{// プレイヤー2Dの描画
	CObject2D::Draw();
}

//=============================================================================
// 移動
// Author : 唐﨑結斗
// 概要 : 速度と方向をもった移動量を算出し返す
//=============================================================================
D3DXVECTOR3 CEnemy2D::Move(void)
{
	// 移動量の算出
	D3DXVECTOR3 rot = GetRot();
	m_move.x = sinf(rot.z) * m_fSpeed;
	m_move.y = cosf(rot.z) * m_fSpeed;

	return m_move;
}
